"""add component models

Revision ID: aa7df5c1e096
Revises: 599050a43aa1
Create Date: 2025-02-08 21:58:01.497473

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = 'aa7df5c1e096'
down_revision = '599050a43aa1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('manufacturers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('website', sa.String(length=200), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('shadow_analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('annual_shading_loss', sa.Float(), nullable=True),
    sa.Column('monthly_shading_losses', sa.JSON(), nullable=True),
    sa.Column('hourly_shading_factors', sa.JSON(), nullable=True),
    sa.Column('obstacles', sa.JSON(), nullable=True),
    sa.Column('horizon_profile', sa.JSON(), nullable=True),
    sa.Column('shadow_maps', sa.JSON(), nullable=True),
    sa.Column('sun_path_diagram', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('batteries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('manufacturer_id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('chemistry', sa.Enum('LITHIUM_ION', 'LFP', 'LEAD_ACID', 'FLOW', 'SALT', name='batterychemistry'), nullable=False),
    sa.Column('nominal_voltage', sa.Float(), nullable=True),
    sa.Column('nominal_capacity', sa.Float(), nullable=True),
    sa.Column('usable_capacity', sa.Float(), nullable=True),
    sa.Column('nominal_energy', sa.Float(), nullable=True),
    sa.Column('usable_energy', sa.Float(), nullable=True),
    sa.Column('round_trip_efficiency', sa.Float(), nullable=True),
    sa.Column('max_charge_power', sa.Float(), nullable=True),
    sa.Column('max_discharge_power', sa.Float(), nullable=True),
    sa.Column('max_charge_current', sa.Float(), nullable=True),
    sa.Column('max_discharge_current', sa.Float(), nullable=True),
    sa.Column('cycle_life', sa.Integer(), nullable=True),
    sa.Column('dod', sa.Float(), nullable=True),
    sa.Column('calendar_life', sa.Integer(), nullable=True),
    sa.Column('warranty_years', sa.Integer(), nullable=True),
    sa.Column('warranty_cycles', sa.Integer(), nullable=True),
    sa.Column('width', sa.Float(), nullable=True),
    sa.Column('height', sa.Float(), nullable=True),
    sa.Column('depth', sa.Float(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('ip_rating', sa.String(length=10), nullable=True),
    sa.Column('temp_min', sa.Float(), nullable=True),
    sa.Column('temp_max', sa.Float(), nullable=True),
    sa.Column('humidity_max', sa.Float(), nullable=True),
    sa.Column('altitude_max', sa.Float(), nullable=True),
    sa.Column('bms_included', sa.Boolean(), nullable=True),
    sa.Column('monitoring', sa.String(length=100), nullable=True),
    sa.Column('communication', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['manufacturer_id'], ['manufacturers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inverters',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('manufacturer_id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('type', sa.Enum('STRING', 'CENTRAL', 'MICRO', 'HYBRID', 'STORAGE', name='invertertype'), nullable=False),
    sa.Column('max_power_dc', sa.Float(), nullable=True),
    sa.Column('max_voltage_dc', sa.Float(), nullable=True),
    sa.Column('mppt_voltage_min', sa.Float(), nullable=True),
    sa.Column('mppt_voltage_max', sa.Float(), nullable=True),
    sa.Column('max_current_dc', sa.Float(), nullable=True),
    sa.Column('mppt_count', sa.Integer(), nullable=True),
    sa.Column('nominal_power_ac', sa.Float(), nullable=True),
    sa.Column('max_power_ac', sa.Float(), nullable=True),
    sa.Column('nominal_voltage_ac', sa.Float(), nullable=True),
    sa.Column('nominal_frequency', sa.Float(), nullable=True),
    sa.Column('max_current_ac', sa.Float(), nullable=True),
    sa.Column('thdi', sa.Float(), nullable=True),
    sa.Column('max_efficiency', sa.Float(), nullable=True),
    sa.Column('euro_efficiency', sa.Float(), nullable=True),
    sa.Column('mppt_efficiency', sa.Float(), nullable=True),
    sa.Column('dc_reverse_polarity', sa.Boolean(), nullable=True),
    sa.Column('dc_switch', sa.Boolean(), nullable=True),
    sa.Column('dc_surge_protection', sa.Boolean(), nullable=True),
    sa.Column('ac_surge_protection', sa.Boolean(), nullable=True),
    sa.Column('ground_fault_monitoring', sa.Boolean(), nullable=True),
    sa.Column('ip_rating', sa.String(length=10), nullable=True),
    sa.Column('cooling', sa.String(length=50), nullable=True),
    sa.Column('noise_level', sa.Float(), nullable=True),
    sa.Column('width', sa.Float(), nullable=True),
    sa.Column('height', sa.Float(), nullable=True),
    sa.Column('depth', sa.Float(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('temp_min', sa.Float(), nullable=True),
    sa.Column('temp_max', sa.Float(), nullable=True),
    sa.Column('humidity_max', sa.Float(), nullable=True),
    sa.Column('altitude_max', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['manufacturer_id'], ['manufacturers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mounting_structures',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('manufacturer_id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('type', sa.Enum('GROUND', 'ROOF_PITCHED', 'ROOF_FLAT', 'FACADE', 'TRACKER_1AXIS', 'TRACKER_2AXIS', name='mountingtype'), nullable=False),
    sa.Column('material', sa.String(length=50), nullable=True),
    sa.Column('coating', sa.String(length=50), nullable=True),
    sa.Column('wind_speed_max', sa.Float(), nullable=True),
    sa.Column('snow_load_max', sa.Float(), nullable=True),
    sa.Column('tilt_angle_min', sa.Float(), nullable=True),
    sa.Column('tilt_angle_max', sa.Float(), nullable=True),
    sa.Column('adjustable_tilt', sa.Boolean(), nullable=True),
    sa.Column('rail_spacing_min', sa.Float(), nullable=True),
    sa.Column('rail_spacing_max', sa.Float(), nullable=True),
    sa.Column('tracking_type', sa.String(length=50), nullable=True),
    sa.Column('tracking_range', sa.JSON(), nullable=True),
    sa.Column('backtracking', sa.Boolean(), nullable=True),
    sa.Column('motor_type', sa.String(length=50), nullable=True),
    sa.Column('module_compatibility', sa.JSON(), nullable=True),
    sa.Column('roof_types', sa.JSON(), nullable=True),
    sa.Column('tools_required', sa.JSON(), nullable=True),
    sa.Column('grounding_method', sa.String(length=100), nullable=True),
    sa.Column('wire_management', sa.Boolean(), nullable=True),
    sa.Column('estimated_install_time', sa.Float(), nullable=True),
    sa.Column('wind_certifications', sa.JSON(), nullable=True),
    sa.Column('structural_certifications', sa.JSON(), nullable=True),
    sa.Column('warranty_structure', sa.Integer(), nullable=True),
    sa.Column('warranty_coating', sa.Integer(), nullable=True),
    sa.Column('datasheet_url', sa.String(length=200), nullable=True),
    sa.Column('installation_manual_url', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['manufacturer_id'], ['manufacturers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('solar_panels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('manufacturer_id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('technology', sa.Enum('MONO_PERC', 'MONO_TOPCON', 'MONO_HJT', 'POLY_PERC', 'THIN_FILM_CIGS', 'THIN_FILM_CDTE', 'BIFACIAL', name='moduletechnology'), nullable=False),
    sa.Column('nominal_power', sa.Float(), nullable=False),
    sa.Column('voltage_mpp', sa.Float(), nullable=True),
    sa.Column('current_mpp', sa.Float(), nullable=True),
    sa.Column('voltage_oc', sa.Float(), nullable=True),
    sa.Column('current_sc', sa.Float(), nullable=True),
    sa.Column('efficiency', sa.Float(), nullable=True),
    sa.Column('temp_coefficient_pmax', sa.Float(), nullable=True),
    sa.Column('temp_coefficient_voc', sa.Float(), nullable=True),
    sa.Column('temp_coefficient_isc', sa.Float(), nullable=True),
    sa.Column('length', sa.Float(), nullable=True),
    sa.Column('width', sa.Float(), nullable=True),
    sa.Column('thickness', sa.Float(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('frame_type', sa.String(length=50), nullable=True),
    sa.Column('cells_count', sa.Integer(), nullable=True),
    sa.Column('cell_type', sa.String(length=50), nullable=True),
    sa.Column('cell_size', sa.Float(), nullable=True),
    sa.Column('cell_arrangement', sa.String(length=20), nullable=True),
    sa.Column('warranty_product', sa.Integer(), nullable=True),
    sa.Column('warranty_power_80', sa.Integer(), nullable=True),
    sa.Column('warranty_power_25y', sa.Float(), nullable=True),
    sa.Column('certificates', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['manufacturer_id'], ['manufacturers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('projects')
    op.drop_table('shadow_analysis')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('shadow_analysis',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('project_id', sa.INTEGER(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.Column('annual_shading_loss', sa.FLOAT(), nullable=True),
    sa.Column('monthly_shading_losses', sqlite.JSON(), nullable=True),
    sa.Column('hourly_shading_factors', sqlite.JSON(), nullable=True),
    sa.Column('obstacles', sqlite.JSON(), nullable=True),
    sa.Column('horizon_profile', sqlite.JSON(), nullable=True),
    sa.Column('shadow_maps', sqlite.JSON(), nullable=True),
    sa.Column('sun_path_diagram', sqlite.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=False),
    sa.Column('longitude', sa.FLOAT(), nullable=False),
    sa.Column('altitude', sa.FLOAT(), nullable=True),
    sa.Column('terrain_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('albedo', sa.FLOAT(), nullable=True),
    sa.Column('system_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('system_capacity', sa.FLOAT(), nullable=True),
    sa.Column('tilt_angle', sa.FLOAT(), nullable=True),
    sa.Column('azimuth_angle', sa.FLOAT(), nullable=True),
    sa.Column('ground_coverage_ratio', sa.FLOAT(), nullable=True),
    sa.Column('row_spacing', sa.FLOAT(), nullable=True),
    sa.Column('use_tracking', sa.BOOLEAN(), nullable=True),
    sa.Column('tracking_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('area_available', sa.FLOAT(), nullable=True),
    sa.Column('budget_limit', sa.FLOAT(), nullable=True),
    sa.Column('grid_connection_limit', sa.FLOAT(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('solar_panels')
    op.drop_table('mounting_structures')
    op.drop_table('inverters')
    op.drop_table('batteries')
    op.drop_table('shadow_analyses')
    op.drop_table('manufacturers')
    # ### end Alembic commands ###
